{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Link",
	"patterns": [
		{ "include": "#keywords" },
		{ "include": "#strings" },
		{ "include": "#invalidStrings" },
		{ "include": "#variables" },
		{ "include": "#macros" },
		{ "include": "#comments" },
		{ "include": "#decorators" },
		{ "include": "#functions" }
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
				"name": "keyword.control.link",
				"match": "\\b(info|warning|error|die|depends|while|eq|gt|lt|gte|lte)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.link",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
				"name": "constant.character.escape.link",
				"match": "\\\\."
				}
			]
		},
		"invalidStrings": {
			"patterns": [
				{
				"name": "invalid.illegal.string.single.link",
				"begin": "'",
				"end": "'"
				}
			]
		},
		"variables": {
			"patterns": [
				{
				"name": "variable.other.link",
				"match": "\\b[A-Z][A-Z0-9_]*\\b"
				}
			]
		},
		"macros": {
			"patterns": [
				{
				"name": "macro.preprocessor.flow",
				"match": "#flow\\b"
				},
				{
				"name": "macro.preprocessor.step",
				"match": "#step\\b"
				},
				{
				"name": "macro.preprocessor.data",
				"match": "#data\\b"
				},
				{
				"name": "invalid.illegal.macro.link",
				"match": "#(?!flow|step|data)\\w+"
				}
			]
		},
		"comments": {
			"patterns": [
				{
				"name": "comment.line.double-slash.link",
				"match": "//.*"
				},
				{
				"name": "comment.block.link",
				"begin": "/\\*",
				"end": "\\*/"
				}
			]
		},
		"decorators": {
			"patterns": [
				{
				"name": "meta.decorator.link",
				"begin": "\\[\\s*(debug|set|import)\\s*\\(",
				"beginCaptures": {
					"1": { "name": "entity.name.decorator.link" }
				},
				"end": "\\)\\s*\\]",
				"patterns": [
					{ "include": "#strings" },
					{ "include": "#variables" },
					{ "include": "#functions" }
				]
				},
				{
				"name": "invalid.illegal.decorator.link",
				"match": "\\[\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(.*?\\)\\s*\\]",
				"captures": {
					"1": { "name": "invalid.illegal.decorator.name.link" }
				}
				}
			]
		},
		"functions": {
			"patterns": [
				{
				"name": "entity.name.function.link",
				"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\()",
				"patterns": [
					{
					"include": "#strings"
					}
				]
				}
			]
		}
	},
	"scopeName": "main.link"
}